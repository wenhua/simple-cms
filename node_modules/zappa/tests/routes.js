(function() {
  var port, zappa;

  zappa = require('../src/zappa');

  port = 15000;

  this.tests = {
    hello: function(t) {
      var c, zapp;
      t.expect(1, 2, 3, 4, 5);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.get({
          '/string': 'string'
        });
        this.get({
          '/return': function() {
            return 'return';
          }
        });
        this.get({
          '/send': function() {
            return this.send('send');
          }
        });
        this.get(/\/regex$/, 'regex');
        return this.get(/\/regex_function$/, function() {
          return 'regex function';
        });
      });
      c = t.client(zapp.app);
      c.get('/string', function(err, res) {
        return t.equal(1, res.body, 'string');
      });
      c.get('/return', function(err, res) {
        return t.equal(2, res.body, 'return');
      });
      c.get('/send', function(err, res) {
        return t.equal(3, res.body, 'send');
      });
      c.get('/regex', function(err, res) {
        return t.equal(4, res.body, 'regex');
      });
      return c.get('/regex_function', function(err, res) {
        return t.equal(5, res.body, 'regex function');
      });
    },
    verbs: function(t) {
      var c, zapp;
      t.expect(1, 2, 3);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.post({
          '/': function() {
            return 'post';
          }
        });
        this.put({
          '/': function() {
            return 'put';
          }
        });
        return this.del({
          '/': function() {
            return 'del';
          }
        });
      });
      c = t.client(zapp.app);
      c.post('/', function(err, res) {
        return t.equal(1, res.body, 'post');
      });
      c.put('/', function(err, res) {
        return t.equal(2, res.body, 'put');
      });
      return c.del('/', function(err, res) {
        return t.equal(3, res.body, 'del');
      });
    },
    redirect: function(t) {
      var c, zapp;
      t.expect(1, 2);
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.get({
          '/': function() {
            return this.redirect('/foo');
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        t.equal(1, res.statusCode, 302);
        return t.ok(2, res.headers.location.match(/\/foo$/));
      });
    },
    params: function(t) {
      var c, headers, json, zapp;
      t.expect(1, 2);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.use('bodyParser');
        this.get({
          '/:foo': function() {
            return this.params.foo + this.query.ping;
          }
        });
        return this.post({
          '/:foo': function() {
            return this.params.foo + this.query.ping + this.body.zig;
          }
        });
      });
      c = t.client(zapp.app);
      c.get('/bar?ping=pong', function(err, res) {
        return t.equal(1, res.body, 'barpong');
      });
      headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
      };
      json = {
        zig: 'zag'
      };
      return c.post('/bar?ping=pong', {
        headers: headers,
        json: json
      }, function(err, res) {
        return t.equal(2, res.body, 'barpongzag');
      });
    }
  };

}).call(this);
