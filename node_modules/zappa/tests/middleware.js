(function() {
  var port, zappa;

  zappa = require('../src/zappa');

  port = 15500;

  this.tests = {
    'vanilla express API': function(t) {
      var c, zapp;
      t.expect('static', 'response time');
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.app.use(this.express.static(__dirname + '/public'));
        return this.app.use(this.express.responseTime());
      });
      c = t.client(zapp.app);
      c.get('/foo.txt', function(err, res) {
        return t.equal('static', res.body, 'bar');
      });
      return c.get('/', function(err, res) {
        return t.ok('response time', res.headers['x-response-time'].match(/\d+ms/));
      });
    },
    use: function(t) {
      var c, zapp;
      t.expect('static', 'response time');
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.use(this.express.static(__dirname + '/public'), this.express.responseTime());
      });
      c = t.client(zapp.app);
      c.get('/foo.txt', function(err, res) {
        return t.equal('static', res.body, 'bar');
      });
      return c.get('/', function(err, res) {
        return t.ok('response time', res.headers['x-response-time'].match(/\d+ms/));
      });
    },
    'use + shortcuts': function(t) {
      var c, zapp;
      t.expect('static', 'response time');
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.use({
          static: __dirname + '/public'
        }, 'responseTime');
      });
      c = t.client(zapp.app);
      c.get('/foo.txt', function(err, res) {
        return t.equal('static', res.body, 'bar');
      });
      return c.get('/', function(err, res) {
        return t.ok('response time', res.headers['x-response-time'].match(/\d+ms/));
      });
    },
    'use + shortcuts + zappa added defaults': function(t) {
      var c, zapp;
      t.expect('static', 'response time');
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.use('static', 'responseTime');
      });
      c = t.client(zapp.app);
      c.get('/foo.txt', function(err, res) {
        return t.equal('static', res.body, 'bar');
      });
      return c.get('/', function(err, res) {
        return t.ok('response time', res.headers['x-response-time'].match(/\d+ms/));
      });
    },
    precedence: function(t) {
      var c, zapp;
      t.expect('static');
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.use(this.app.router, 'static');
        return this.get({
          '/foo.txt': 'intercepted!'
        });
      });
      c = t.client(zapp.app);
      return c.get('/foo.txt', function(err, res) {
        return t.equal('static', res.body, 'intercepted!');
      });
    }
  };

}).call(this);
