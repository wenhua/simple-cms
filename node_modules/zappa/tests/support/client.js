(function() {
  var Client, fs, io, jsdom, log, request, url,
    __slice = Array.prototype.slice;

  log = console.log;

  fs = require('fs');

  url = require('url');

  request = require('request');

  jsdom = require('jsdom');

  io = require('socket.io-client');

  Client = (function() {

    function Client(arg) {
      var check,
        _this = this;
      if (typeof arg === 'string') {
        this.url = arg;
        this.parsed = url.parse(arg);
        this.protocol = this.parsed.protocol || 'http:';
        this.host = this.parsed.hostname;
        this.port = this.parsed.port || 80;
      } else {
        this.app = arg;
        check = function() {
          try {
            _this.host = _this.app.address().address;
            return _this.port = _this.app.address().port;
          } catch (err) {
            return process.nextTick(check);
          }
        };
        check();
      }
    }

    Client.prototype.request = function() {
      var args, cb, k, method, opts, path, req, v;
      method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (method == null) method = 'get';
      for (k in args) {
        v = args[k];
        switch (typeof v) {
          case 'string':
            path = v;
            break;
          case 'object':
            opts = v;
            break;
          case 'function':
            cb = v;
        }
      }
      if (opts == null) opts = {};
      if (opts.followRedirect == null) opts.followRedirect = false;
      if (opts.method == null) opts.method = method;
      opts.url = "http://" + this.host + ":" + this.port + path;
      if (opts.encoding == null) opts.encoding = 'utf8';
      return req = request(opts, function(err, res) {
        if (err && (cb != null)) {
          return cb(err);
        } else {
          if (opts.dom != null) {
            return jsdom.env({
              html: res.body,
              done: function(err, window) {
                if (err && (cb != null)) {
                  return cb(err);
                } else {
                  return cb(null, res, window);
                }
              }
            });
          } else {
            if (cb != null) return cb(null, res);
          }
        }
      });
    };

    Client.prototype.get = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.request.apply(this, ['get'].concat(__slice.call(args)));
    };

    Client.prototype.post = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.request.apply(this, ['post'].concat(__slice.call(args)));
    };

    Client.prototype.put = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.request.apply(this, ['put'].concat(__slice.call(args)));
    };

    Client.prototype.del = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.request.apply(this, ['delete'].concat(__slice.call(args)));
    };

    Client.prototype.connect = function() {
      return this.socket = io.connect("http://" + this.host + ":" + this.port);
    };

    Client.prototype.on = function() {
      return this.socket.on.apply(this.socket, arguments);
    };

    Client.prototype.emit = function() {
      return this.socket.emit.apply(this.socket, arguments);
    };

    return Client;

  })();

  module.exports = function() {
    var args, c;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    c = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return typeof result === "object" ? result : child;
    })(Client, args, function() {});
    c.get.dom = function() {
      var a, args, found, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        a = args[_i];
        if (typeof a === 'object') {
          found = true;
          a.dom = true;
        }
      }
      if (!found) {
        args.push({
          dom: true
        });
      }
      return c.get.apply(c, args);
    };
    return c;
  };

}).call(this);
