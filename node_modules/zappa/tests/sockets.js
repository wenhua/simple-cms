(function() {
  var port, zappa;

  zappa = require('../src/zappa');

  port = 15700;

  this.tests = {
    connects: function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.on({
          connection: function() {
            return t.reached(1);
          }
        });
      });
      c = t.client(zapp.app);
      return c.connect();
    },
    'server emits': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.on({
          connection: function() {
            return this.emit('welcome');
          }
        });
      });
      c = t.client(zapp.app);
      c.connect();
      return c.on('welcome', function() {
        return t.reached(1);
      });
    },
    'server broadcasts': function(t) {
      var c, c2, c3, zapp;
      t.expect('reached1', 'reached2', 'data1', 'data2');
      t.wait(3000);
      zapp = zappa(port++, {
        t: t
      }, function() {
        return this.on({
          shout: function() {
            return this.io.sockets.emit('shout', this.data);
          }
        });
      });
      c = t.client(zapp.app);
      c.connect();
      c2 = t.client(zapp.app);
      c2.connect();
      c3 = t.client(zapp.app);
      c3.connect();
      c.on('shout', function(data) {
        t.reached('reached1');
        return t.equal('data1', data.foo, 'bar');
      });
      c2.on('shout', function(data) {
        t.reached('reached2');
        return t.equal('data2', data.foo, 'bar');
      });
      return c.emit('shout', {
        foo: 'bar'
      });
    }
  };

}).call(this);
