(function() {
  var port, zappa;

  zappa = require('../src/zappa');

  port = 15200;

  this.tests = {
    client: function(t) {
      var c, zapp;
      t.expect(1, 2);
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.client({
          '/index.js': function() {
            return this.get({
              '#/': function() {
                return alert('hi');
              }
            });
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/index.js', function(err, res) {
        t.equal(1, res.body, ';zappa.run(function () {\n            return this.get({\n              \'#/\': function() {\n                return alert(\'hi\');\n              }\n            });\n          });');
        return t.equal(2, res.headers['content-type'], 'application/javascript');
      });
    },
    coffee: function(t) {
      var c, zapp;
      t.expect(1, 2);
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.coffee({
          '/coffee.js': function() {
            return alert('hi');
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/coffee.js', function(err, res) {
        t.equal(1, res.body, ';var __slice = Array.prototype.slice;var __hasProp = Object.prototype.hasOwnProperty;var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };var __extends = function(child, parent) {  for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }  function ctor() { this.constructor = child; }  ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype;  return child; };var __indexOf = Array.prototype.indexOf || function(item) {  for (var i = 0, l = this.length; i < l; i++) {    if (this[i] === item) return i;  } return -1; };(function () {\n            return alert(\'hi\');\n          })();');
        return t.equal(2, res.headers['content-type'], 'application/javascript');
      });
    },
    js: function(t) {
      var c, zapp;
      t.expect(1, 2);
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.js({
          '/js.js': 'alert(\'hi\');'
        });
      });
      c = t.client(zapp.app);
      return c.get('/js.js', function(err, res) {
        t.equal(1, res.body, "alert('hi');");
        return t.equal(2, res.headers['content-type'], 'application/javascript');
      });
    },
    css: function(t) {
      var c, zapp;
      t.expect(1, 2);
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.css({
          '/index.css': 'font-family: sans-serif;'
        });
      });
      c = t.client(zapp.app);
      return c.get('/index.css', function(err, res) {
        t.equal(1, res.body, 'font-family: sans-serif;');
        return t.equal(2, res.headers['content-type'], 'text/css');
      });
    },
    stylus: function(t) {
      var c, zapp;
      t.expect('header', 'body');
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.stylus({
          '/index.css': 'border-radius()\n  -webkit-border-radius arguments  \n  -moz-border-radius arguments  \n  border-radius arguments  \n\nbody\n  font 12px Helvetica, Arial, sans-serif  \n\na.button\n  border-radius 5px'
        });
      });
      c = t.client(zapp.app);
      return c.get('/index.css', function(err, res) {
        t.equal('header', res.headers['content-type'], 'text/css');
        return t.equal('body', res.body, 'body {\n  font: 12px Helvetica, Arial, sans-serif;\n}\na.button {\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  border-radius: 5px;\n}\n');
      });
    },
    jquery: function(t) {
      var c, zapp;
      t.expect('content-type', 'length');
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.use('zappa');
      });
      c = t.client(zapp.app);
      return c.get('/zappa/jquery.js', function(err, res) {
        t.equal('content-type', res.headers['content-type'], 'application/javascript');
        return t.equal('length', res.headers['content-length'], '91669');
      });
    },
    sammy: function(t) {
      var c, zapp;
      t.expect('content-type', 'length');
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.use('zappa');
      });
      c = t.client(zapp.app);
      return c.get('/zappa/sammy.js', function(err, res) {
        t.equal('content-type', res.headers['content-type'], 'application/javascript');
        return t.equal('length', res.headers['content-length'], '18059');
      });
    },
    zappa: function(t) {
      var c, zapp;
      t.expect('content-type', 'snippet');
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.use('zappa');
      });
      c = t.client(zapp.app);
      return c.get('/zappa/zappa.js', function(err, res) {
        t.equal('content-type', res.headers['content-type'], 'application/javascript');
        return t.ok('snippet', res.body.indexOf('window.zappa = {};') > -1);
      });
    },
    'zappa (automatic)': function(t) {
      var c, zapp;
      t.expect('content-type', 'snippet');
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.client({
          '/index.js': function() {}
        });
      });
      c = t.client(zapp.app);
      return c.get('/zappa/zappa.js', function(err, res) {
        t.equal('content-type', res.headers['content-type'], 'application/javascript');
        return t.ok('snippet', res.body.indexOf('window.zappa = {};') > -1);
      });
    },
    minify: function(t) {
      var c, zapp;
      t.expect('zappa', 'client', 'shared', 'coffee', 'js');
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.enable('minify');
        this.client({
          '/client.js': function() {
            return alert('foo');
          }
        });
        this.shared({
          '/shared.js': function() {
            if (typeof window !== "undefined" && window !== null) {
              return alert('foo');
            }
          }
        });
        this.coffee({
          '/coffee.js': function() {
            return alert('foo');
          }
        });
        return this.js({
          '/js.js': "alert('foo');"
        });
      });
      c = t.client(zapp.app);
      c.get('/zappa/zappa.js', function(err, res) {
        return t.ok('zappa', res.body.indexOf('window.zappa={},') > -1);
      });
      c.get('/client.js', function(err, res) {
        return t.equal('client', res.headers['content-length'], '42');
      });
      c.get('/shared.js', function(err, res) {
        return t.equal('shared', res.headers['content-length'], '87');
      });
      c.get('/coffee.js', function(err, res) {
        return t.equal('coffee', res.headers['content-length'], '475');
      });
      return c.get('/js.js', function(err, res) {
        return t.equal('js', res.headers['content-length'], '12');
      });
    }
  };

}).call(this);
