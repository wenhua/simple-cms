(function() {
  var port, zappa;

  zappa = require('../src/zappa');

  port = 15600;

  this.tests = {
    inline: function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar',
              layout: false
            });
          }
        });
        return this.view({
          index: function() {
            return h2("CoffeeKup inline template: " + this.foo);
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<h2>CoffeeKup inline template: bar</h2>');
      });
    },
    'inline + inline layout': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar'
            });
          }
        });
        this.view({
          index: function() {
            return h2("CoffeeKup inline template: " + this.foo);
          }
        });
        return this.view({
          layout: function() {
            doctype(5);
            return html(function() {
              head(function() {
                return title('CoffeeKup inline layout');
              });
              return body(this.body);
            });
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<!DOCTYPE html><html><head><title>CoffeeKup inline layout</title></head><body><h2>CoffeeKup inline template: bar</h2></body></html>');
      });
    },
    file: function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar',
              layout: false
            });
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<h2>CoffeeKup file template: bar</h2>');
      });
    },
    'file + file layout': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar'
            });
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<!DOCTYPE html><html><head><title>CoffeeKup file layout</title></head><body><h2>CoffeeKup file template: bar</h2></body></html>');
      });
    },
    'response.render, file': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.get({
          '/': function() {
            return this.response.render('index', {
              foo: 'bar',
              layout: false
            });
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<h2>CoffeeKup file template: bar</h2>');
      });
    },
    'response.render, file + file layout': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        return this.get({
          '/': function() {
            return this.response.render('index', {
              foo: 'bar'
            });
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<!DOCTYPE html><html><head><title>CoffeeKup file layout</title></head><body><h2>CoffeeKup file template: bar</h2></body></html>');
      });
    },
    'eco, inline': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.set({
          'view engine': 'eco'
        });
        this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar',
              layout: false
            });
          }
        });
        return this.view({
          index: "<h2>Eco inline template: <%= @foo %></h2>"
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<h2>Eco inline template: bar</h2>');
      });
    },
    'eco, inline + inline layout': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.set({
          'view engine': 'eco'
        });
        this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar'
            });
          }
        });
        this.view({
          index: "<h2>Eco inline template: <%= @foo %></h2>"
        });
        return this.view({
          layout: '<!DOCTYPE html>\n<html>\n  <head>\n    <title>Eco inline layout</title>\n  </head>\n  <body><%- @body %></body>\n</html>'
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<!DOCTYPE html>\n<html>\n  <head>\n    <title>Eco inline layout</title>\n  </head>\n  <body><h2>Eco inline template: bar</h2></body>\n</html>');
      });
    },
    'eco, file': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.set({
          'view engine': 'eco'
        });
        return this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar',
              layout: false
            });
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<h2>Eco file template: bar</h2>');
      });
    },
    'eco, file + file layout': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.set({
          'view engine': 'eco'
        });
        return this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar'
            });
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<!DOCTYPE html>\n<html>\n  <head>\n    <title>Eco file layout</title>\n  </head>\n  <body><h2>Eco file template: bar</h2></body>\n</html>');
      });
    },
    'eco, zappa adapter, inline + inline layout': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.set({
          'view engine': 'eco'
        });
        this.register({
          eco: this.zappa.adapter('eco')
        });
        this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar'
            });
          }
        });
        this.view({
          index: "<h2>Eco inline template: <%= @foo %></h2>"
        });
        return this.view({
          layout: '<!DOCTYPE html>\n<html>\n  <head>\n    <title>Eco inline layout</title>\n  </head>\n  <body><%- @body %></body>\n</html>'
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<!DOCTYPE html>\n<html>\n  <head>\n    <title>Eco inline layout</title>\n  </head>\n  <body><h2>Eco inline template: bar</h2></body>\n</html>');
      });
    },
    'jade, inline': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.set({
          'view engine': 'jade'
        });
        this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar',
              layout: false
            });
          }
        });
        return this.view({
          index: "h2= 'Jade inline template: ' + foo"
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<h2>Jade inline template: bar</h2>');
      });
    },
    'jade, inline + inline layout': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.set({
          'view engine': 'jade'
        });
        this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar'
            });
          }
        });
        this.view({
          index: "h2= 'Jade inline template: ' + foo"
        });
        return this.view({
          layout: '!!! 5\nhtml\n  head\n    title Jade inline layout\n  body!= body'
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<!DOCTYPE html><html><head><title>Jade inline layout</title></head><body><h2>Jade inline template: bar</h2></body></html>');
      });
    },
    'jade, file': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.set({
          'view engine': 'jade'
        });
        return this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar',
              layout: false
            });
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<h2>Jade file template: bar</h2>');
      });
    },
    'jade, file + file layout': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.set({
          'view engine': 'jade'
        });
        return this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar'
            });
          }
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<!DOCTYPE html><html><head><title>Jade file layout</title></head><body><h2>Jade file template: bar</h2></body></html>');
      });
    },
    'jade, zappa adapter, inline + inline layout': function(t) {
      var c, zapp;
      t.expect(1);
      t.wait(3000);
      zapp = zappa(port++, function() {
        this.set({
          'view engine': 'jade'
        });
        this.register({
          jade: this.zappa.adapter('jade')
        });
        this.get({
          '/': function() {
            return this.render('index', {
              foo: 'bar'
            });
          }
        });
        this.view({
          index: "h2= 'Jade inline template: ' + foo"
        });
        return this.view({
          layout: '!!! 5\nhtml\n  head\n    title Jade inline layout\n  body!= body'
        });
      });
      c = t.client(zapp.app);
      return c.get('/', function(err, res) {
        return t.equal(1, res.body, '<!DOCTYPE html><html><head><title>Jade inline layout</title></head><body><h2>Jade inline template: bar</h2></body></html>');
      });
    }
  };

}).call(this);
